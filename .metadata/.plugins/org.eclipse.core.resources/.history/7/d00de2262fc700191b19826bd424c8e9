/*
 * final_project.c
 *
 *  Created on: Aug 25, 2019
 *      Author: Mohamed Elsayed
 */
#include  <avr/io.h>
#include  <avr/interrupt.h>
#include  <util/delay.h>

#define  F_CPU 1000000
#define MIN 46
#define HOUR 13
#define SEC 55

void PORT_init(void);
void Timer1_init(void);
void INT0_init(void);
void INT1_init(void);

unsigned char sec=SEC,minut=MIN,hour=HOUR;
unsigned char pause=0, flag_Minut=0,flag_Hour=0;

int main(void){

	Timer1_init();
	INT0_init();
	INT1_init();
    // enable global interrupts
	sei();
	while(1){
		PORTB =(PORTB & 0xC0) | (1<<PB5);
		PORTC =(PORTC & 0xF0) | (sec%10);
		_delay_us(10);
		PORTB =(PORTB & 0xC0) | (1<<PB4);
		PORTC =(PORTC & 0xF0) | (sec/10);
		_delay_us(10);
		PORTB =(PORTB & 0xC0) | (1<<PB3);
		PORTC =(PORTC & 0xF0) | (minut%10);
		_delay_us(10);
		PORTB =(PORTB & 0xC0) | (1<<PB2);
		PORTC =(PORTC & 0xF0) | (minut/10);
		_delay_us(10);
		PORTB =(PORTB & 0xC0) | (1<<PB1);
		PORTC =(PORTC & 0xF0) | (hour%10);
		_delay_us(10);
		PORTB =(PORTB & 0xC0) | (1<<PB0);
		PORTC =(PORTC & 0xF0) | (hour/10);
		_delay_us(10);
		if((1==pause)){
			if(!(PIND & (1<<PD0)) &&  (0==flag_Minut)){
				minut=(minut+1)%60;
				flag_Minut=1;
			}else
			{
				if((PIND & (1<<PD0)) &&  (1==flag_Minut)) flag_Minut=0;
			}
			if(!(PIND & (1<<PD1)) &&  (0==flag_Hour)){
				hour =(hour+1)%24;
				flag_Hour=1;
			}else
			{
				if((PIND & (1<<PD1)) &&  (1==flag_Hour)) flag_Hour=0;
			}
		}
	}
	return 0;
}
void PORT_init(void){
	DDRB |=0x3F;
	PORTB &=0xC0;
	DDRC |=0x0F;
	PORTC &=0xF0;
	DDRD &=0xF0;
	PORTD |=0x0F;
}

void Timer1_init(void){
	 // set up timer with prescaler = 64 and CTC mode
	   TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);

	    // initialize counter
	    TCNT1 = 0;

	    // initialize compare value
	    OCR1A = 15625;

	    // enable compare interrupt
	    TIMSK |= (1 << OCIE1A);

}

void INT0_init(void){
	DDRD &=~(1<<PD2);
	PORTD |=(1<<PD2);
	GICR |=(1<<INT0);
	MCUCR |=(1<<ISC01);
}

void INT1_init(void){
	DDRD &=~(1<<PD3);
	PORTD |=(1<<PD3);
	GICR |=(1<<INT1);
	MCUCR |=(1<<ISC11);
}

ISR (TIMER1_COMPA_vect)
{
	if(0 == pause){
    sec++;
		if(60 ==sec){
			minut++;
			sec=0;
		}
		if(60 ==minut){
			hour++;
			minut=0;
		}
		if(24==hour){
			hour=0;
		}
	}else{}
}

ISR(INT0_vect){
	sec=SEC;
	minut=MIN;
	hour=HOUR;
}

ISR(INT1_vect){
	pause^=(1<<0);

}
